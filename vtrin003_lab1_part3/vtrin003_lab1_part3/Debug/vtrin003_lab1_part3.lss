
vtrin003_lab1_part3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000146  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000f2  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000146  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000178  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000001b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000875  00000000  00000000  000001d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000078e  00000000  00000000  00000a4d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000025e  00000000  00000000  000011db  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  0000143c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000041f  00000000  00000000  00001460  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000169  00000000  00000000  0000187f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  000019e8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	4b c0       	rjmp	.+150    	; 0x9c <__bad_interrupt>
   6:	00 00       	nop
   8:	49 c0       	rjmp	.+146    	; 0x9c <__bad_interrupt>
   a:	00 00       	nop
   c:	47 c0       	rjmp	.+142    	; 0x9c <__bad_interrupt>
   e:	00 00       	nop
  10:	45 c0       	rjmp	.+138    	; 0x9c <__bad_interrupt>
  12:	00 00       	nop
  14:	43 c0       	rjmp	.+134    	; 0x9c <__bad_interrupt>
  16:	00 00       	nop
  18:	41 c0       	rjmp	.+130    	; 0x9c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	3f c0       	rjmp	.+126    	; 0x9c <__bad_interrupt>
  1e:	00 00       	nop
  20:	3d c0       	rjmp	.+122    	; 0x9c <__bad_interrupt>
  22:	00 00       	nop
  24:	3b c0       	rjmp	.+118    	; 0x9c <__bad_interrupt>
  26:	00 00       	nop
  28:	39 c0       	rjmp	.+114    	; 0x9c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	37 c0       	rjmp	.+110    	; 0x9c <__bad_interrupt>
  2e:	00 00       	nop
  30:	35 c0       	rjmp	.+106    	; 0x9c <__bad_interrupt>
  32:	00 00       	nop
  34:	33 c0       	rjmp	.+102    	; 0x9c <__bad_interrupt>
  36:	00 00       	nop
  38:	31 c0       	rjmp	.+98     	; 0x9c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	2f c0       	rjmp	.+94     	; 0x9c <__bad_interrupt>
  3e:	00 00       	nop
  40:	2d c0       	rjmp	.+90     	; 0x9c <__bad_interrupt>
  42:	00 00       	nop
  44:	2b c0       	rjmp	.+86     	; 0x9c <__bad_interrupt>
  46:	00 00       	nop
  48:	29 c0       	rjmp	.+82     	; 0x9c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	27 c0       	rjmp	.+78     	; 0x9c <__bad_interrupt>
  4e:	00 00       	nop
  50:	25 c0       	rjmp	.+74     	; 0x9c <__bad_interrupt>
  52:	00 00       	nop
  54:	23 c0       	rjmp	.+70     	; 0x9c <__bad_interrupt>
  56:	00 00       	nop
  58:	21 c0       	rjmp	.+66     	; 0x9c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	1f c0       	rjmp	.+62     	; 0x9c <__bad_interrupt>
  5e:	00 00       	nop
  60:	1d c0       	rjmp	.+58     	; 0x9c <__bad_interrupt>
  62:	00 00       	nop
  64:	1b c0       	rjmp	.+54     	; 0x9c <__bad_interrupt>
  66:	00 00       	nop
  68:	19 c0       	rjmp	.+50     	; 0x9c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__bad_interrupt>
  6e:	00 00       	nop
  70:	15 c0       	rjmp	.+42     	; 0x9c <__bad_interrupt>
  72:	00 00       	nop
  74:	13 c0       	rjmp	.+38     	; 0x9c <__bad_interrupt>
  76:	00 00       	nop
  78:	11 c0       	rjmp	.+34     	; 0x9c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	0f c0       	rjmp	.+30     	; 0x9c <__bad_interrupt>
  7e:	00 00       	nop
  80:	0d c0       	rjmp	.+26     	; 0x9c <__bad_interrupt>
  82:	00 00       	nop
  84:	0b c0       	rjmp	.+22     	; 0x9c <__bad_interrupt>
  86:	00 00       	nop
  88:	09 c0       	rjmp	.+18     	; 0x9c <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	02 d0       	rcall	.+4      	; 0x9e <main>
  9a:	29 c0       	rjmp	.+82     	; 0xee <_exit>

0000009c <__bad_interrupt>:
  9c:	b1 cf       	rjmp	.-158    	; 0x0 <__vectors>

0000009e <main>:
#include <avr/io.h>


int main(void)
{
	DDRA = 0x00; PORTA = 0xFF; //setting inputs and outputs
  9e:	11 b8       	out	0x01, r1	; 1
  a0:	8f ef       	ldi	r24, 0xFF	; 255
  a2:	82 b9       	out	0x02, r24	; 2
	DDRC = 0xFF; PORTC = 0x00;
  a4:	87 b9       	out	0x07, r24	; 7
  a6:	18 b8       	out	0x08, r1	; 8
		//PORTC = cntavail; for exercise 2 
		if(cntavail == 0){ 
			//if its full we want to set the last bit to 1, which means we can just max out the register 
			//8 bit reg will hold 255 bits, -127 to 128. if full, set portc to 128, or 0x80
			//if its full, cntavail will be 0. dont want to change the code, though could save a few lines
			PORTC = 0x80;
  a8:	50 e8       	ldi	r21, 0x80	; 128
	unsigned char cntavail = 0x00;
	
	/* Replace with your application code */
	while (1)
	{
		spot1 = PINA & 0x01;
  aa:	20 b1       	in	r18, 0x00	; 0
  ac:	21 70       	andi	r18, 0x01	; 1
		spot2 = PINA & 0x02;
  ae:	30 b1       	in	r19, 0x00	; 0
		spot3 = PINA & 0x04;
  b0:	90 b1       	in	r25, 0x00	; 0
		spot4 = PINA & 0x08;
  b2:	80 b1       	in	r24, 0x00	; 0
		
		spot2 = spot2 / 2;
  b4:	36 95       	lsr	r19
  b6:	31 70       	andi	r19, 0x01	; 1
		spot3 = spot3 / 4;
  b8:	92 fb       	bst	r25, 2
  ba:	99 27       	eor	r25, r25
  bc:	90 f9       	bld	r25, 0
		spot4 = spot4 / 8;
  be:	83 fb       	bst	r24, 3
  c0:	88 27       	eor	r24, r24
  c2:	80 f9       	bld	r24, 0
		//if there is a car, that specific parking spot will set to 1.
		//will need to shift everything down to the lowest bit possible, filling from 
		//after shifting everything down & simplifying,
		
		//PORTC = cntavail; for exercise 2 
		if(cntavail == 0){ 
  c4:	43 2f       	mov	r20, r19
  c6:	49 0f       	add	r20, r25
  c8:	42 0f       	add	r20, r18
  ca:	48 0f       	add	r20, r24
  cc:	44 30       	cpi	r20, 0x04	; 4
  ce:	11 f4       	brne	.+4      	; 0xd4 <main+0x36>
			//if its full we want to set the last bit to 1, which means we can just max out the register 
			//8 bit reg will hold 255 bits, -127 to 128. if full, set portc to 128, or 0x80
			//if its full, cntavail will be 0. dont want to change the code, though could save a few lines
			PORTC = 0x80;
  d0:	58 b9       	out	0x08, r21	; 8
  d2:	eb cf       	rjmp	.-42     	; 0xaa <main+0xc>
			spot2 = spot2 * 2;
			spot3 = spot3 * 4;
			spot4 = spot4 * 8;
			
			cntavail = spot1 + spot2 + spot3 + spot4;
			tempAvailSpots = ~cntavail;
  d4:	33 0f       	add	r19, r19
  d6:	99 0f       	add	r25, r25
  d8:	99 0f       	add	r25, r25
  da:	93 0f       	add	r25, r19
  dc:	92 0f       	add	r25, r18
  de:	88 0f       	add	r24, r24
  e0:	88 0f       	add	r24, r24
  e2:	88 0f       	add	r24, r24
  e4:	89 0f       	add	r24, r25
  e6:	80 95       	com	r24
			//inverting will give you the spots that ARENT taken up
			cntavail = tempAvailSpots & 0x0F;
  e8:	8f 70       	andi	r24, 0x0F	; 15
			//this is a safeguard to essentially ensure that we only output bits 0-3
			//we want to clear out 4-7 because we dont want to output it
			PORTC = cntavail;
  ea:	88 b9       	out	0x08, r24	; 8
  ec:	de cf       	rjmp	.-68     	; 0xaa <main+0xc>

000000ee <_exit>:
  ee:	f8 94       	cli

000000f0 <__stop_program>:
  f0:	ff cf       	rjmp	.-2      	; 0xf0 <__stop_program>
